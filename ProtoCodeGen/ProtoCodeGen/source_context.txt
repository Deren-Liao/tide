syntax = "proto3";

package google.devtools.source.v1;

option java_multiple_files = true;
option java_package = "com.google.devtools.source.v1";
option java_outer_classname = "SourceContextProto";

import "google/api/annotations.proto";


// A SourceContext is a reference to a tree of files. A SourceContext together
// with a path point to a unique revision of a single file or directory.
message SourceContext {
  // A SourceContext can refer any one of the following types of repositories.
  oneof context {
    // A SourceContext referring to a revision in a cloud repo.
    CloudRepoSourceContext cloud_repo = 1;

    // A SourceContext referring to a snapshot in a cloud workspace.
    CloudWorkspaceSourceContext cloud_workspace = 2;

    // A SourceContext referring to a Gerrit project.
    GerritSourceContext gerrit = 3;

    // A SourceContext referring to any third party Git repo (e.g. GitHub).
    GitSourceContext git = 6;

    // A SourceContext referring to a CL in Piper.
    PiperDepotSourceContext piper = 4
      [(google.api.field_visibility).restriction = "GOOGLE_INTERNAL"];

    // A SourceContext referring to a Citc client.
    CitcWorkspaceSourceContext citc = 5
      [(google.api.field_visibility).restriction = "GOOGLE_INTERNAL"];
  }
}

// An ExtendedSourceContext is a SourceContext combined with additional
// details describing the context.
message ExtendedSourceContext {
  // Any source context.
  SourceContext context = 1;

  // Labels with user defined metadata.
  map<string, string> labels = 2;
}

// An alias to a repo revision.
message AliasContext {
  // The type of an Alias. (-- This enum should be kept in sync with the
  // Warehouse LabelType enum in google3/codesite/proto/browse.proto and
  // the Kind enum in google3/google/devtools/source/v1/resources.proto --)
  enum Kind {
    ANY = 0;                    // Do not use.
    FIXED = 1;                  // Git tag
    MOVABLE = 2;                // Git branch
    // OTHER is used to specify non-standard aliases, those not of the kinds
    // above. For example, if a Git repo has a ref named "refs/foo/bar", it
    // is considered to be of kind OTHER.
    OTHER = 4;
  }

  // The alias kind.
  Kind kind = 1;

  // The alias name.
  string name = 2;
}

// A CloudRepoSourceContext denotes a particular revision in a cloud
// repo (a repo hosted by the Google Cloud Platform).
message CloudRepoSourceContext {
  // The ID of the repo.
  RepoId repo_id = 1;

  // A revision in a cloud repository can be identified by either its revision
  // ID or its Alias.
  oneof revision {
    // A revision ID.
    string revision_id = 2;

    // The name of an alias (branch, tag, etc.).
    string alias_name = 3 [deprecated=true];

    // An alias, which may be a branch or tag.
    AliasContext alias_context = 4;
  }
}

// A CloudWorkspaceSourceContext denotes a workspace at a particular snapshot.
message CloudWorkspaceSourceContext {
  // The ID of the workspace.
  CloudWorkspaceId workspace_id = 1;

  // The ID of the snapshot.
  // An empty snapshot_id refers to the most recent snapshot.
  string snapshot_id = 2;
}

// A SourceContext referring to a Gerrit project.
message GerritSourceContext {
  // The URI of a running Gerrit instance.
  string host_uri = 1;

  // The full project name within the host. Projects may be nested, so
  // "project/subproject" is a valid project name.
  // The "repo name" is hostURI/project.
  string gerrit_project = 2;

  // A revision in a Gerrit project can be identified by either its revision ID
  // or its alias.
  oneof revision {
    // A revision (commit) ID.
    string revision_id = 3;

    // The name of an alias (branch, tag, etc.).
    string alias_name = 4 [deprecated=true];

    // An alias, which may be a branch or tag.
    AliasContext alias_context = 5;
  }
}

// A GitSourceContext denotes a particular revision in a third party Git
// repository (e.g. GitHub).
message GitSourceContext {
  // Git repository URL.
  string url = 1;

  // Git commit hash.
  string revision_id = 2;  // required.
}


// Source code in the Piper depot as of a certain change.
message PiperDepotSourceContext {
    option (google.api.message_visibility).restriction = "GOOGLE_INTERNAL";

  // CL number. If zero, represents depot head.
  int64 change_number = 1;

  // Specifies that the source context refers to a branch, rather than the
  // depot root.  For example, if the branch files live under
  // //depot/branches/mybranch/25, then branch_name should be "mybranch/25".
  string branch_name = 2;

  // If false, use the released components as of the CL.
  // If true, use true head.
  // If branch_name is present and indicates a release branch, this field is not
  // useful since the presence or absence of the .srcfs_workspace file checked
  // in under e.g. depot/branches/mybranch/25 carries the same information and
  // is more authoritative.
  bool disable_components = 3;

  // The complete components state description. If present, disable_components
  // is ignored.  Not all services accept arbitrary version map.  Services not
  // supporting arbitrary version maps must emit an error if this field is set,
  // instead of silently falling back on disable_components.
  //
  // This is a serialized VersionMap from
  // //devtools/components/proto/version_map.proto. We use bytes instead of the
  // actual type to avoid having a file under //google depend on one outside of
  // //google.
  bytes version_map = 4;
}

// A CitC workspace as represented by its ID and snapshot.
message CitcWorkspaceSourceContext {
    option (google.api.message_visibility).restriction = "GOOGLE_INTERNAL";

  // A unique identifier for a citc workspace.
  // The workspace_id for USER's CLIENT can be found in
  // /google/src/cloud/USER/CLIENT/.citc/workspace_id
  string workspace_id = 1;

  // The snapshot within the workspace. If zero, refers to the moving head of
  // the workspace.  Clients which use zero should be robust against remote
  // changes made to a workspace.
  //
  // If non-zero, refers to an immutable CitC snapshot.
  //
  // The current snapshot_version for USER's CLIENT can be found in
  // /google/src/cloud/USER/CLIENT/.citc/snapshot_version
  uint64 snapshot_version = 2;

  // See PiperDepotSourceContext.branch_name for documentation.
  string branch_name = 3;

  // If true, ignore local workspace changes and use the
  // baseline of the workspace instead.
  bool is_baseline = 4;
}

// A unique identifier for a cloud repo.
message RepoId {
  // A cloud repository can be identified by either its project ID and
  // repository name combination, or its globally unique identifier.
  oneof id {
    // A combination of a project ID and a repo name.
    ProjectRepoId project_repo_id = 1;

    // A server-assigned, globally unique identifier.
    string uid = 2;
  }
}

// Selects a repo using a Google Cloud Platform project ID
// (e.g. winged-cargo-31) and a repo name within that project.
message ProjectRepoId {
  // The ID of the project.
  string project_id = 1;

  // The name of the repo. Leave empty for the default repo.
  string repo_name = 2;
}


// A CloudWorkspaceId is a unique identifier for a cloud workspace.
// A cloud workspace is a place associated with a repo where modified files
// can be stored before they are committed.
message CloudWorkspaceId {
  // The ID of the repo containing the workspace.
  RepoId repo_id = 1;

  // The unique name of the workspace within the repo.  This is the name
  // chosen by the client in the Source API's CreateWorkspace method.
  string name = 2;
}