// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: source_context_simple.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Bird_V2 {

  /// <summary>Holder for reflection information generated from source_context_simple.proto</summary>
  public static partial class SourceContextSimpleReflection {

    #region Descriptor
    /// <summary>File descriptor for source_context_simple.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SourceContextSimpleReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Chtzb3VyY2VfY29udGV4dF9zaW1wbGUucHJvdG8SBGJpcmQiQQoNU291cmNl",
            "Q29udGV4dBIlCgNnaXQYBiABKAsyFi5iaXJkLkdpdFNvdXJjZUNvbnRleHRI",
            "AEIJCgdjb250ZXh0IjQKEEdpdFNvdXJjZUNvbnRleHQSCwoDdXJsGAEgASgJ",
            "EhMKC3JldmlzaW9uX2lkGAIgASgJYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Bird.SourceContext), global::Bird.SourceContext.Parser, new[]{ "Git" }, new[]{ "Context" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bird.GitSourceContext), global::Bird.GitSourceContext.Parser, new[]{ "Url", "RevisionId" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// A SourceContext is a reference to a tree of files. A SourceContext together
  /// with a path point to a unique revision of a single file or directory.
  /// </summary>
  public sealed partial class SourceContext : pb::IMessage<SourceContext> {
    private static readonly pb::MessageParser<SourceContext> _parser = new pb::MessageParser<SourceContext>(() => new SourceContext());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SourceContext> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bird.SourceContextSimpleReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SourceContext() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SourceContext(SourceContext other) : this() {
      switch (other.ContextCase) {
        case ContextOneofCase.Git:
          Git = other.Git.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SourceContext Clone() {
      return new SourceContext(this);
    }

    /// <summary>Field number for the "git" field.</summary>
    public const int GitFieldNumber = 6;
    /// <summary>
    /// A SourceContext referring to any third party Git repo (e.g. GitHub).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bird.GitSourceContext Git {
      get { return contextCase_ == ContextOneofCase.Git ? (global::Bird.GitSourceContext) context_ : null; }
      set {
        context_ = value;
        contextCase_ = value == null ? ContextOneofCase.None : ContextOneofCase.Git;
      }
    }

    private object context_;
    /// <summary>Enum of possible cases for the "context" oneof.</summary>
    public enum ContextOneofCase {
      None = 0,
      Git = 6,
    }
    private ContextOneofCase contextCase_ = ContextOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContextOneofCase ContextCase {
      get { return contextCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearContext() {
      contextCase_ = ContextOneofCase.None;
      context_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SourceContext);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SourceContext other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Git, other.Git)) return false;
      if (ContextCase != other.ContextCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (contextCase_ == ContextOneofCase.Git) hash ^= Git.GetHashCode();
      hash ^= (int) contextCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (contextCase_ == ContextOneofCase.Git) {
        output.WriteRawTag(50);
        output.WriteMessage(Git);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (contextCase_ == ContextOneofCase.Git) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Git);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SourceContext other) {
      if (other == null) {
        return;
      }
      switch (other.ContextCase) {
        case ContextOneofCase.Git:
          Git = other.Git;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 50: {
            global::Bird.GitSourceContext subBuilder = new global::Bird.GitSourceContext();
            if (contextCase_ == ContextOneofCase.Git) {
              subBuilder.MergeFrom(Git);
            }
            input.ReadMessage(subBuilder);
            Git = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A GitSourceContext denotes a particular revision in a third party Git
  /// repository (e.g. GitHub).
  /// </summary>
  public sealed partial class GitSourceContext : pb::IMessage<GitSourceContext> {
    private static readonly pb::MessageParser<GitSourceContext> _parser = new pb::MessageParser<GitSourceContext>(() => new GitSourceContext());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GitSourceContext> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bird.SourceContextSimpleReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GitSourceContext() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GitSourceContext(GitSourceContext other) : this() {
      url_ = other.url_;
      revisionId_ = other.revisionId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GitSourceContext Clone() {
      return new GitSourceContext(this);
    }

    /// <summary>Field number for the "url" field.</summary>
    public const int UrlFieldNumber = 1;
    private string url_ = "";
    /// <summary>
    /// Git repository URL.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Url {
      get { return url_; }
      set {
        url_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "revision_id" field.</summary>
    public const int RevisionIdFieldNumber = 2;
    private string revisionId_ = "";
    /// <summary>
    /// Git commit hash.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RevisionId {
      get { return revisionId_; }
      set {
        revisionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GitSourceContext);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GitSourceContext other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Url != other.Url) return false;
      if (RevisionId != other.RevisionId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Url.Length != 0) hash ^= Url.GetHashCode();
      if (RevisionId.Length != 0) hash ^= RevisionId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Url.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Url);
      }
      if (RevisionId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RevisionId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Url.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Url);
      }
      if (RevisionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RevisionId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GitSourceContext other) {
      if (other == null) {
        return;
      }
      if (other.Url.Length != 0) {
        Url = other.Url;
      }
      if (other.RevisionId.Length != 0) {
        RevisionId = other.RevisionId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Url = input.ReadString();
            break;
          }
          case 18: {
            RevisionId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
